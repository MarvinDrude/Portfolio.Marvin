
@layout CvLayout 
@page "/cv"
@using Portfolio.Marvin.Components.Common
@using Portfolio.Marvin.Components.CvComponents
@using Portfolio.Marvin.Components.Personal
@using Portfolio.Marvin.Enums
@using Portfolio.Marvin.Models.Experiences
@using Portfolio.Marvin.Models.Projects
@using Portfolio.Marvin.Providers.Interfaces

@inject IExperienceProvider ExperienceProvider
@inject IProjectProvider ProjectProvider
@inject ITechnologyProvider TechnologyProvider

<PageTitle>Marvin Drude - CV - Senior Full Stack Softare Developer</PageTitle>
<HeadContent>
   <MetaInfo Title="Marvin Drude - CV"
             Description="CV of Marvin Drude - Senior Full Stack Software Developer"
             ImageUrl="/brand.webp"
             Keywords="CV, Marvin Drude, Senior Full Stack, Software Developer"
             SiteName="Marvin Drude - Portfolio"
             Type="website" />
</HeadContent>

<div class="cv-page first">
   <div class="left">
      <div class="header">
         <div class="line">
            <div class="image-wrapper">
               <div class="me-image"></div>
            </div>
         </div>
      </div>
      <div class="contact">
         <h4>Contact</h4>
         <PersonalLink SvgName="marker">
            <span class="link">NRW, Germany</span>
         </PersonalLink>
         <PersonalLink SvgName="browser">
            <span class="link">https://marvindrude.com</span>
         </PersonalLink>
         <PersonalLink SvgName="github">
            <span class="link">https://github.com/MarvinDrude</span>
         </PersonalLink>
         <PersonalLink SvgName="mobile">
            <span class="link">on request</span>
         </PersonalLink>
      </div>
      <div class="languages">
         <h4>Technologies</h4>
         <div class="list">
            @(string.Join(", ", _technologies
               .Select(x => TechnologyProvider.GetTechnology(x))
               .Where(x => x is not null)
               .Select(x => x!.Name)))
         </div>
      </div>
      <div class="tools">
         <h4>Tools</h4>
         <div class="list">
            Git, GitHub, Docker, Visual Studio, Visual Studio Code, UI Design, Rider
         </div>
      </div>
      <div class="school">
         <h4>Education</h4>
         <div>
            <p>Berufskolleg Schloß Neuhaus</p>
            High school diploma with a focus on mathematics and computer science, 
            as well as business administration with accounting and controlling.
         </div>
      </div>
      <div class="interests">
         <h4>Interests</h4>
         <div>
            Weight training, movies & TV shows, programming, UI design
         </div>
      </div>
   </div>
   <div class="right">
      <div class="header">
         <h1>Marvin Drude</h1>
      </div>
      <div class="job">
         Senior Full Stack Software Developer
      </div>
      
      <h2>Professional Experiences</h2>
      @foreach (var experience in _experiences.Take(3))
      {
         <CvExperience Experience="@experience"/>
      }
   </div>
</div>

<div class="cv-page right">
   @foreach (var experience in _experiences.Skip(3))
   {
      <CvExperience Experience="@experience"/>
   }
   
   <h2>Personal Projects</h2>
   @foreach (var project in _projects.Take(4))
   {
      <CvProject Project="@project" />
   }
</div>

<div class="cv-page right">
   @foreach (var project in _projects.Skip(4))
   {
      <CvProject Project="@project" />
   }
</div>

@code {

   private List<Experience> _experiences = [];
   private List<Project> _projects = [];

   private static readonly List<TechnologyKind> _technologies = [
      TechnologyKind.CSharp, TechnologyKind.Net, TechnologyKind.Blazor,
      TechnologyKind.Html5, TechnologyKind.Css, TechnologyKind.JavaScript,
      TechnologyKind.PostgreSql, TechnologyKind.MySql, TechnologyKind.Clickhouse,
      TechnologyKind.NodeJs, TechnologyKind.SqlServer, TechnologyKind.TypeScript
   ];

   protected override Task OnInitializedAsync()
   {
      _experiences = [.. ExperienceProvider.GetAllExperiences()];
      _projects = [.. ProjectProvider.GetAllProjects()];
      
      return base.OnInitializedAsync();
   }

}
