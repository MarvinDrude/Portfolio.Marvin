@using Me.Memory.Buffers
@using Portfolio.Marvin.Components.Common

@implements IDisposable

@inject IJSRuntime JsRuntime

<div class="terminal" @onclick="@EventCallback.Factory.Create(this, OnClickInsideTerminal)">
   <div class="bar">
      <div class="left">
         <div class="tab">
            <span>New Terminal Window</span>
         </div>
      </div>
      <div class="right">
         <div class="btn"><SvgIcon Name="minimize" /></div>
         <div class="btn"><SvgIcon Name="maximize" /></div>
         <div class="btn"><SvgIcon Name="close" /></div>
      </div>
   </div>
   <div class="body" @ref="@_bodyRef">
      <div class="history">
      @foreach (var line in _lines)
      {
         <pre class="line">@line</pre>
      }
      </div>
      <div class="input">
         <span>&gt; </span>
         <label class="hide" for="console-input">Input</label>
         <input 
            @ref="@_textAreaRef" 
            @bind="@_input" 
            @bind:event="oninput"
            @onkeydown="@(EventCallback.Factory.Create<KeyboardEventArgs>(this, OnKeyDown))" 
            type="text"
            id="console-input" rows="1"
            autocomplete="off" 
            autocorrect="off" 
            autocapitalize="off" 
            spellcheck="false" />
      </div>
   </div>
</div>

@code {

   private ElementReference _textAreaRef;
   private ElementReference _bodyRef;
   
   private CircularBuffer<string> _lines = new(_maxLines);
   private const int _maxLines = 100;

   private string? _input;

   protected override Task OnInitializedAsync()
   {
      Reset();
      return base.OnInitializedAsync();
   }

   private async Task OnClickInsideTerminal()
   {
      await _textAreaRef.FocusAsync();
   }

   private async Task OnKeyDown(KeyboardEventArgs args)
   {
      if (args.Key != "Enter") return;
      
      _lines.Add(_input ?? " ");
      _input = "";
      
      await InvokeAsync(StateHasChanged);
      await ScrollToBottom();
   }

   private void Reset()
   {
      _lines.Dispose();
      _lines = new CircularBuffer<string>(_maxLines);
      
      _lines.Add("Welcome to PortfolioOS v1.0");
      _lines.Add(" ");
      _lines.Add(@" __  __                  _       ");
      _lines.Add(@"|  \/  | __ _ _ ____   _(_)_ __  ");
      _lines.Add(@"| |\/| |/ _` | '__\ \ / / | '_ \ ");
      _lines.Add(@"| |  | | (_| | |   \ V /| | | | |");
      _lines.Add(@"|_|  |_|\__,_|_|    \_/ |_|_| |_|");
      _lines.Add(" ");
      _lines.Add("Type 'help' to see available commands.");
   }

   private async Task ScrollToBottom()
   {
      await JsRuntime.InvokeVoidAsync("scrollToBottom", _bodyRef);
   }

   public void Dispose()
   {
      _lines.Dispose();
   }
}